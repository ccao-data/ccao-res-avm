---
params:
  run_id: "2023-12-20-awesome-claire"
  year: "2024"
---

```{r}
# This setup script is run at the top of each Quarto report subsection to load
# libraries, data, and other objects needed for the report. It only loads
# objects if they don't already exist in the environment, so it can be run
# idempotently to avoid reloading data sets and libraries

## Libraries and paths ---------------------------------------------------------
library(purrr)
library(here)

# Load list of helper files and main libraries
purrr::walk(list.files(here::here("R"), "\\.R$", full.names = TRUE), source)

# Load reporting-only R libraries
suppressPackageStartupMessages({
  reporting_libs <- "Config/renv/profiles/reporting/dependencies"
  purrr::walk(
    strsplit(read_yaml(here::here("DESCRIPTION"))[[reporting_libs]], ", ")[[1]],
    library,
    character.only = TRUE
  )
})

# TODO: Catch for weird Arrow bug with SIGPIPE. Need to permanently fix later
# https://github.com/apache/arrow/issues/32026
cpp11::cpp_source(code = "
#include <csignal>
#include <cpp11.hpp>

[[cpp11::register]] void ignore_sigpipes() {
  signal(SIGPIPE, SIG_IGN);
}
")

ignore_sigpipes()

# Initialize a dictionary of file paths. See misc/file_dict.csv for details
paths <- model_file_dict(model_params$run_id, model_params$year)


## Input data ------------------------------------------------------------------

# Ingest training set used for this run from DVC bucket (if not local)
if (!exists("training_data")) {
  training_data <- read_parquet(paths$input$training$local)
}

# Load Home Improvement Exemption data
if (!exists("hie_data")) {
  hie_data <- read_parquet(paths$input$hie$local)
}

# Load characteristics data
if (!exists("chars_data")) {
  chars_data <- read_parquet(paths$input$char$local)
}


## Output data -----------------------------------------------------------------

# Grab metadata to check output data <> params alignment
metadata <- read_parquet(paths$output$metadata$local)
if (metadata$run_id != params$run_id) {
  stop(
    "Local run outputs are NOT equal to the requested run_id. You ",
    "should run model_fetch_run() to fetch model outputs from S3"
  )
}

dvc_lock <- read_yaml("../dvc.lock")

# Extract values from the dvc_lock object
dvc_lock_values <- c(
  dvc_lock$stages$ingest$outs[[1]]$md5, # assessment_data
  dvc_lock$stages$ingest$outs[[2]]$md5, # char_data
  dvc_lock$stages$ingest$outs[[3]]$md5, # complex_id_data
  dvc_lock$stages$ingest$outs[[4]]$md5, # hie_data
  dvc_lock$stages$ingest$outs[[5]]$md5, # land_nbhd_rate_data
  dvc_lock$stages$ingest$outs[[6]]$md5, # land_site_rate_data
  dvc_lock$stages$ingest$outs[[7]]$md5  # training_data
)

metadata_dvc_md5 <- metadata %>%
  select(
    dvc_md5_assessment_data,
    dvc_md5_char_data,
    dvc_md5_complex_id_data,
    dvc_md5_hie_data,
    dvc_md5_land_nbhd_rate_data,
    dvc_md5_land_site_rate_data,
    dvc_md5_training_data
  )

# Compare each column value with the corresponding yaml value
comparison_results <- mapply(FUN = `==`, metadata_dvc_md5, dvc_lock_values)

# Check if all hashes match
if(!all(comparison_results)) {
  stop(
    "Hash values between the dvc.lock file and the metadata
    do not match. Potential mismatch in input and output data."
  )
} 



# Get the triad of the run to use for filtering
run_triad <- tools::toTitleCase(metadata$assessment_triad)
run_triad_code <- ccao::town_dict %>%
  filter(triad_name == run_triad) %>%
  distinct(triad_code) %>%
  pull(triad_code)

# Load model object and recipe
model_fit <- lightsnip::lgbm_load(paths$output$workflow_fit$local)
model_recipe <- readRDS(paths$output$workflow_recipe$local)

# Load model-generated output data sets
if (!exists("assessment_card")) {
  assessment_card <- read_parquet(paths$output$assessment_card$local)
}
if (!exists("assessment_pin")) {
  assessment_pin <- read_parquet(paths$output$assessment_pin$local)
}
if (!exists("test_card")) {
  test_card <- read_parquet(paths$output$test_card$local)
}
if (!exists("model_performance_test")) {
  model_performance_test <-
    arrow::read_parquet(paths$output$performance_test$local)
}
if (!exists("model_performance_quantile_test")) {
  model_performance_quantile_test <-
    arrow::read_parquet(paths$output$performance_quantile_test$local)
}

# Load feature importance data
if (!exists("feat_imp_df")) {
  feat_imp_df <- read_parquet(paths$output$feature_importance$local)
}

# Load SHAP data if it exists (only exists for important runs)
if (file.exists(paths$output$shap$local)) {
  if (!exists("shap_df")) {
    shap_df <- read_parquet(paths$output$shap$local)
    shap_exists <- nrow(shap_df) > 0
  }
} else {
  shap_exists <- FALSE
}
```
