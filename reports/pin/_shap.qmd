{{< include ../_setup.qmd >}}

## SHAP Values

```{r _pin_shap_data_manipulation}
shap_df_filtered <- shap_df %>%
  left_join(
    assessment_card %>%
      mutate(meta_triad = ccao::town_get_triad(as.character(township_code))) %>%
      select(meta_year, meta_pin, meta_card_num, meta_triad),
    by = c("meta_year", "meta_pin", "meta_card_num"),
    relationship = "many-to-many"
  ) %>%
  arrange(meta_pin, meta_card_num)

shap_predictors <- names(shap_df_filtered)
shap_predictors <- shap_predictors[!shap_predictors %in% c(
  "meta_year",
  "meta_pin",
  "meta_card_num",
  "pred_card_shap_baseline_fmv",
  "township_code",
  "meta_triad"
)]

assessment_card_filtered <- assessment_card %>%
  mutate(meta_triad = ccao::town_get_triad(as.character(township_code))) %>%
  arrange(meta_pin, meta_card_num)

townships_to_iterate <- shap_df_filtered %>%
  distinct(township_code) %>%
  pull() %>%
  as.character()

shap_idx_full_model <- which(
  assessment_card_filtered$meta_township_code %in% townships_to_iterate
)

shap_df_filtered <- shap_df_filtered %>%
  filter(meta_pin %in% target_pin) %>%
  arrange(meta_pin)

assessment_card_filtered <- assessment_card_filtered %>%
  filter(meta_pin %in% target_pin) %>%
  arrange(meta_pin)
```

### Force Plot by Card

```{r _pin_shap_viz_function}
create_shap_viz <- function(row_idx) {
  shapviz_object <- shapviz(
    object = shap_df_filtered %>%
      select(all_of(shap_predictors)) %>%
      slice(row_idx) %>%
      as.matrix(),
    X = assessment_card_filtered %>%
      select(all_of(shap_predictors)) %>%
      slice(row_idx),
    baseline = shap_df_filtered$pred_card_shap_baseline_fmv[1]
  ) %>%
    sv_waterfall(
      max_display = 15L
    )

  return(shapviz_object)
}

num_rows <- nrow(shap_df_filtered)
```

::: {.panel-tabset}

```{r _pin_shap_results, results = 'asis'}
results <- vector("list", length = num_rows)

for (i in 1:num_rows) {
  cat("##", "Card ", shap_df_filtered$meta_card_num[i], "\n")

  results[[i]] <- create_shap_viz(i) +
    scale_x_continuous(labels = scales::dollar)

  print(results[[i]])

  cat("\n\n")
}
```

:::

### Aggregate Categories by Card

```{r _pin_shap_table, results = "asis", eval=metadata$shap_enable}
shap_df_filtered %>%
  filter(meta_pin %in% target_pin) %>%
  mutate(PIN = as.numeric(meta_pin)) %>%
  mutate(Card = as.numeric(meta_card_num)) %>%
  select_if(is.numeric) %>%
  select(-any_of("township_code")) %>%
  mutate(
    `Chars.` = rowSums(select(., starts_with("char")), na.rm = TRUE),
    ACS5 = rowSums(select(., starts_with("acs5")), na.rm = TRUE),
    Time = rowSums(select(., starts_with("time")), na.rm = TRUE),
    Location = rowSums(select(., starts_with("loc")), na.rm = TRUE) +
      ccao_is_corner_lot - loc_school_secondary_district_geoid -
      loc_school_elementary_district_geoid + other_tax_bill_rate,
    Proximity = rowSums(select(., starts_with("prox")), na.rm = TRUE),
    School = rowSums(select(., any_of(c(
      "other_school_district_elementary_avg_rating",
      "other_school_district_secondary_avg_rating",
      "loc_school_elementary_district_geoid",
      "loc_school_secondary_district_geoid"
    ))), na.rm = TRUE),
    Baseline = pred_card_shap_baseline_fmv,
    Meta = rowSums(select(., starts_with("meta")), na.rm = TRUE)
  ) %>%
  arrange(PIN, Card) %>%
  select(
    Card, Baseline, `Chars.`, ACS5, Time,
    Location, Proximity, School, Meta
  ) %>%
  mutate(across(2:ncol(.), ~ scales::dollar(.x, accuracy = 1))) %>%
  kable(align = "lrrrrrrrr") %>%
  kable_styling(
    "striped",
    position = "left",
    fixed_thead = TRUE
  )
```

