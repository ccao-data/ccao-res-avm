---
title: "PIN: `r params$pin`"
subtitle: "Run ID: `r params$run_id`"
date: "`r Sys.Date()`"
author: "Cook County Assessor's Office Data Department"
execute:
  echo: false
  warning: false
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
    fig-align: center
    fontsize: 12pt
editor: source
params:
  run_id: "2024-01-07-great-ida"
  year: "2024"
  pin: "15011010010000"
---

{{< include ../_setup.qmd >}}

```{r pin_checks}
target_pin <- ccao::pin_clean(params$pin)

if (nchar(target_pin) != 14) {
  stop("Invalid PIN: must be 14 characters long")
}

if (!target_pin %in% assessment_card$meta_pin) {
  stop("Invalid PIN: not found in assessment data")
}
```

```{r pin_setup}

noctua_options(cache_size = 10)
con <- dbConnect(noctua::athena())

res_chars <- dbGetQuery(
  conn = con,
  sprintf("SELECT pin, year, pin10, class, char_yrblt, char_bldg_sf, char_land_sf, char_beds, char_fbath, char_hbath, char_frpl, char_type_resd, char_rooms FROM default.vw_card_res_char WHERE CAST(year AS INTEGER) > 2020 AND pin = '%s'", params$pin)
)

working_data <- dbGetQuery(
  conn = con,
  sprintf("SELECT * FROM default.vw_pin_value WHERE CAST(year AS INTEGER) > 2020 AND pin = '%s'", params$pin)
)


```

## Topline Characteristics

```{r pin_topline_characteristics}
assessment_pin %>%
  filter(meta_pin == params$pin) %>%
  select(meta_pin, pred_pin_final_fmv, sale_recent_1_date, sale_recent_1_price, flag_pin_is_multicard, flag_char_missing_critical_value) %>%
  kable()

print(assessment_pin)
```



## Identify any Missing Characteristics or Changes in Characteristics

```{r pin_changes_in_characteristics}
chars_wide <- res_chars %>%
  distinct(pin, year, .keep_all = TRUE) %>%
  arrange(year, decreasing = FALSE) %>%
  pivot_wider(
    names_from = year,
    values_from = -c(pin, year),
    names_sep = "_",
    id_cols = pin
  )

check_changes <- function(df, start_col) {
  cols <- lapply(df[, (start_col):(start_col + 3)], function(x) as.numeric(as.character(x)))

 
  change_exists <- apply(do.call(cbind, cols), 1, function(x) {
    x[is.na(x)] <- 0  
    any(base::diff(x) != 0)
  })

  return(change_exists)
}

apply_changes_to_dataset <- function(dataset) {
  total_cols <- ncol(dataset)
  start_col <- 6  # Starting from column 5

  while (start_col <= (total_cols - 3)) { 
    # Check for changes in the current group of four columns
    changes <- check_changes(dataset, start_col)

    # Extract the first column name, remove numbers
    first_col_name <- names(dataset)[start_col]
    modified_col_name <- gsub("\\d", "", first_col_name)

    # Create a new column name
    new_col_name <- paste(modified_col_name, "change", sep = "")

    # Add the new column to the dataframe
    dataset[[new_col_name]] <- changes


    # Move to the next group of four columns
    start_col <- start_col + 4
  }

  return(dataset)
}

modified_dataset <- apply_changes_to_dataset(chars_wide)

modified_dataset$missing_characteristics = apply(modified_dataset[, 5:ncol(modified_dataset)], 1, function(x) any(is.na(x)))

missing_data_table <- modified_dataset %>% 
  select(1, 47:56) %>%
  kable()

missing_data_table

```

```{r _pin_shap_data_manipulation}
shap_df_filtered <- shap_df %>%
  left_join(
    assessment_card %>%
      mutate(meta_triad = ccao::town_get_triad(meta_township_code)) %>%
      select(meta_year, meta_pin, meta_card_num, meta_triad),
    by = c("meta_year", "meta_pin", "meta_card_num")
  ) %>%
  filter(meta_triad == run_triad_code) %>%
  arrange(meta_pin, meta_card_num)


shap_predictors <- names(shap_df_filtered)
shap_predictors <- shap_predictors[!shap_predictors %in% c(
  "meta_year",
  "meta_pin",
  "meta_card_num",
  "pred_card_shap_baseline_fmv",
  "township_code",
  "meta_triad"
)]

assessment_card_filtered <- assessment_card %>%
  mutate(meta_triad = ccao::town_get_triad(meta_township_code)) %>%
  filter(meta_triad == run_triad_code) %>%
  arrange(meta_pin, meta_card_num)

townships_to_iterate <- shap_df_filtered %>%
  distinct(township_code) %>%
  pull() %>%
  as.character()

shap_idx_full_model <- which(
  assessment_card_filtered$meta_township_code %in% townships_to_iterate
)

```
## Individual Pin SHAP Results
```{r _pin_shap_viz}

shapviz::shapviz(
  object = shap_df_filtered %>%
    select(all_of(shap_predictors)) %>%
    slice(shap_idx_full_model) %>%
    as.matrix(),
  X = assessment_card_filtered %>%
    select(all_of(shap_predictors)) %>%
    slice(shap_idx_full_model),
  baseline = shap_df_filtered$pred_card_shap_baseline_fmv[1]
) %>%
  shapviz::sv_waterfall(
    observation = 1, 
    max_display = 15L
  ) 
```

## Table of SHAP Values grouped by Category
```{r pin_shap_table}


shap_df_filtered_v2 <- shap_df_filtered %>%
  select(4:99)
sum_columns_by_prefix_per_row <- function(df, prefix) {
  df %>%
    select(starts_with(prefix)) %>%
    rowSums(na.rm = TRUE)
}

# Calculate sums for each prefix per row
Characteristics <- sum_columns_by_prefix_per_row(shap_df_filtered_v2, "char")

Census_Data <- sum_columns_by_prefix_per_row(shap_df_filtered_v2, "acs5")

Time <- sum_columns_by_prefix_per_row(shap_df_filtered_v2, "time")

Location <- sum_columns_by_prefix_per_row(shap_df_filtered_v2, "loc") + shap_df_filtered_v2$ccao_is_corner_lot

Proximity <- sum_columns_by_prefix_per_row(shap_df_filtered_v2, "prox")

School <- rowSums(shap_df_filtered_v2[,c("other_school_district_elementary_avg_rating", "other_school_district_secondary_avg_rating", "other_school_district_elementary_avg_rating", "other_school_district_secondary_avg_rating")], na.rm = TRUE)

Baseline <- shap_df_filtered$pred_card_shap_baseline_fmv

Meta <- sum_columns_by_prefix_per_row(shap_df_filtered_v2, "meta")



# Combine all sums into a single table
combined_sums <- data.frame(
  Baseline = dollar_format()(Baseline),
  Characteristics = dollar_format()(Characteristics),
  Census_Data = dollar_format()(Census_Data),
  Time = dollar_format()(Time),
  Location = dollar_format()(Location),
  Proximity = dollar_format()(Proximity),
  School = dollar_format()(School),
  Meta = dollar_format()(Meta)
) %>%
  kable(col.names = c("Baseline", "Characteristics", "Census Data", "Time", "Location", "Proximity", "School", "Meta"),
        align = 'l')

print(combined_sums)
```


## Change in House Value over 3 Year Timeframe
```{r pin_change_in_house_value, results = 'asis'}
wider_data <- working_data %>%
              pivot_wider(names_from = year, 
                          values_from = -c(pin, year),
                          names_sep = "_",
                          id_cols = pin)

single_pin <- wider_data %>%
  select(pin, mailed_tot_2021, certified_tot_2021, board_tot_2021, mailed_tot_2022, certified_tot_2022, board_tot_2022, mailed_tot_2023, certified_tot_2023) %>% 
  inner_join(assessment_pin %>% 
               select(meta_pin, pred_pin_final_fmv_round_no_prorate), by = c("pin" = "meta_pin"))


color_matrix <- matrix("none", nrow = nrow(single_pin), ncol = ncol(single_pin))

for (j in 3:ncol(single_pin)) {
  for (i in 1:nrow(single_pin)) {
    value <- single_pin[i, j]
    previous <- single_pin[i, j-1]

    if (!is.na(value) && !is.na(previous) && previous != 0) {
      if (value > previous) {
        color_matrix[i, j] <- "red"
      } else if (value < previous) {
        color_matrix[i, j] <- "green"
      } else {
        color_matrix[i, j] <- "white"
      }
    } else {
      color_matrix[i, j] <- "gray"
    }
  }
}

display_df <- as.data.frame(lapply(single_pin, as.character), stringsAsFactors = FALSE)

expanded_color_matrix <- matrix("none", nrow = nrow(display_df), ncol = ncol(display_df))
expanded_color_matrix[, 1:ncol(color_matrix)] <- color_matrix

for (j in 1:ncol(display_df)) {
  for (i in 1:nrow(display_df)) {
    display_df[i, j] <- cell_spec(display_df[i, j], "html", background = expanded_color_matrix[i, j])
  }
}

kable_html <- kable(display_df, format = "html", escape = FALSE) %>%
  kable_styling(full_width = FALSE)

print(kable_html)

```
