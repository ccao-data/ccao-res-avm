---
title: "PIN: `r params$pin`"
subtitle: "Run ID: `r params$run_id`"
date: "`r Sys.Date()`"
author: "Cook County Assessor's Office Data Department"
execute:
  echo: false
  warning: false
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
    fig-align: center
    fontsize: 12pt
editor: source
params:
  run_id: "2024-01-07-great-ida"
  year: "2024"
  pin:
    - "28011040250000"

---

{{< include ../_setup.qmd >}}

```{r _pin_checks}
target_pins <- ccao::pin_clean(params$pin)

for (target_pin in target_pins) {
  if (nchar(target_pin) != 14) {
    stop(paste("Invalid PIN:", target_pin, "must be 14 characters long"))
  }

  if (!target_pin %in% assessment_card$meta_pin) {
    stop(paste("Invalid PIN:", target_pin, "not found in assessment data"))
  }
}
```

```{r _pin_URLs, results='asis'}
base_url <- "https://www.cookcountyassessor.com/pin/"
pin_values <- params$pin

for (pin in pin_values) {
  full_url <- paste0(base_url, pin)
  cat(sprintf('<a href="%s">%s</a><br/>', full_url, full_url))
}
```

```{r _pin_setup}
noctua_options(cache_size = 10)
con <- dbConnect(noctua::athena())

pins_clause <- paste0("('", paste(params$pin, collapse = "', '"), "')")

res_chars <- dbGetQuery(
  conn = con,
  sprintf("SELECT pin, year, pin10, pin_is_multicard, card, class, char_yrblt, char_bldg_sf, char_beds, char_fbath, char_hbath, char_air, char_type_resd, char_rooms FROM default.vw_card_res_char WHERE CAST(year AS INTEGER) >= %d AND pin IN %s", as.numeric(params$year) - 3, pins_clause)
)

pin_value <- dbGetQuery(
  conn = con,
  sprintf("SELECT * FROM default.vw_pin_value WHERE CAST(year AS INTEGER) >= %d AND pin IN %s", as.numeric(params$year) - 3, pins_clause)
)

pin_sale <- dbGetQuery(
  conn = con,
  sprintf("SELECT year, pin, num_parcels_sale, doc_no, sale_date, sale_price FROM default.vw_pin_sale WHERE CAST(year AS INTEGER) >= %d AND pin IN %s", as.numeric(params$year) - 10, pins_clause)
)

hie_data_subset <- hie_data %>%
  filter(hie_last_year_active >= params$year) %>%
  mutate(hie = TRUE)
```

## Predicted Model Value

```{r, _pin_predicted_model_value}
assessment_pin %>%
  mutate(township = ccao::town_convert(meta_township_code)) %>%
  filter(meta_pin %in% params$pin) %>%
  arrange(meta_pin) %>%
  select(
    "Township" = township,
    "Final FMV" = pred_pin_final_fmv
  ) %>%
  mutate(`Final FMV` = scales::dollar(`Final FMV`)) %>%
  kable() %>%
  kable_styling(
    "striped",
    position = "left",
    fixed_thead = TRUE,
    html_font = "Consolas"
  )
```

## Sale Data

```{r _pin_topline_characteristics, results= 'asis'}
assessment_pin %>%
  filter(meta_pin %in% params$pin) %>%
  left_join(pin_sale, by = c("meta_pin" = "pin")) %>%
  arrange(meta_pin, desc(sale_date)) %>%
  select(
    "Sale Date" = sale_date,
    "Sale Price" = sale_price,
    "Document Number" = doc_no,
    "Number of Parcels" = num_parcels_sale,
    # "Outlier Type" = sv_outlier_type
  ) %>%
  mutate(`Sale Price` = as.numeric(`Sale Price`)) %>%
  mutate(`Sale Price` = dollar(`Sale Price`)) %>%
  kable() %>%
  kable_styling(
    "striped",
    position = "left",
    fixed_thead = TRUE,
    html_font = "Consolas"
  )
```

## Characteristics

```{r _pin_characteristics}
res_chars %>%
  left_join(hie_data_subset[, c("pin", "hie")], by = c("pin" = "pin")) %>%
  mutate(hie = ifelse(is.na(hie), FALSE, hie)) %>%
  left_join(assessment_pin[, c("meta_pin", "flag_char_missing_critical_value", "flag_pin_is_multicard")], by = c("pin" = "meta_pin")) %>%
  distinct(pin, card, year, .keep_all = TRUE) %>%
  filter(year == params$year | as.numeric(year) == as.numeric(params$year) - 3) %>%
  arrange(pin, card, year) %>%
  group_by(pin, card) %>%
  mutate("Changed Characteristics" = {
    changes <- sapply(across(.cols = -year), function(col) {
      changed_indices <- which(col != lag(col, default = first(col), order_by = year))
      if (length(changed_indices) > 0) TRUE else FALSE
    })
    if (any(changes)) {
      paste(names(changes)[changes], collapse = ", ")
    } else {
      "FALSE"
    }
  }) %>%
  ungroup() %>%
  select(
    Year = year,
    Card = card,
    Class = class,
    "Year Built" = char_yrblt,
    "Building SF" = char_bldg_sf,
    Beds = char_beds,
    "Full Baths" = char_fbath,
    "Half Baths" = char_hbath,
    Air = char_air,
    "Residential Type" = char_type_resd,
    Rooms = char_rooms,
    HIE = hie,
    "Multicard Flag" = flag_pin_is_multicard,
    "Missing Critical Value" = flag_char_missing_critical_value,
    "Changed Characteristics"
  ) %>%
  kable() %>%
  kable_styling(
    "striped",
    position = "left",
    fixed_thead = TRUE,
    html_font = "Consolas"
  )
```

```{r _pin_shap_data_manipulation}
shap_df_filtered <- shap_df %>%
  left_join(
    assessment_card %>%
      mutate(meta_triad = ccao::town_get_triad(meta_township_code)) %>%
      select(meta_year, meta_pin, meta_card_num, meta_triad),
    by = c("meta_year", "meta_pin", "meta_card_num")
  ) %>%
  arrange(meta_pin, meta_card_num)


shap_predictors <- names(shap_df_filtered)
shap_predictors <- shap_predictors[!shap_predictors %in% c(
  "meta_year",
  "meta_pin",
  "meta_card_num",
  "pred_card_shap_baseline_fmv",
  "township_code",
  "meta_triad"
)]

assessment_card_filtered <- assessment_card %>%
  mutate(meta_triad = ccao::town_get_triad(meta_township_code)) %>%
  arrange(meta_pin, meta_card_num)

townships_to_iterate <- shap_df_filtered %>%
  distinct(township_code) %>%
  pull() %>%
  as.character()

shap_idx_full_model <- which(
  assessment_card_filtered$meta_township_code %in% townships_to_iterate
)

shap_df_filtered <- shap_df_filtered %>%
  filter(meta_pin %in% params$pin) %>%
  arrange(meta_pin)

assessment_card_filtered <- assessment_card_filtered %>%
  filter(meta_pin %in% params$pin) %>%
  arrange(meta_pin)
```

## Card-Level SHAP Results

```{r _pin_shap_viz}
create_shap_viz <- function(row_idx) {
  shapviz_object <- shapviz(
    object = shap_df_filtered %>%
      select(all_of(shap_predictors)) %>%
      slice(row_idx) %>%
      as.matrix(),
    X = assessment_card_filtered %>%
      select(all_of(shap_predictors)) %>%
      slice(row_idx),
    baseline = shap_df_filtered$pred_card_shap_baseline_fmv[1]
  ) %>%
    sv_waterfall(
      max_display = 15L
    )

  return(shapviz_object)
}

num_rows <- nrow(shap_df_filtered)
```

::: {.panel-tabset}

```{r _pin_SHAP_results, results = 'asis'}
results <- vector("list", length = num_rows)

for (i in 1:num_rows) {
  cat("##", "Card ", shap_df_filtered$meta_card_num[i], "\n")

  results[[i]] <- create_shap_viz(i)

  print(results[[i]])

  cat("\n\n")
}
```

:::
  
## Table of SHAP Values Grouped by Category
```{r _pin_shap_table, results = "asis"}
shap_df_filtered_ <- shap_df_filtered %>%
  filter(meta_pin %in% params$pin) %>%
  mutate(Pin = as.numeric(meta_pin)) %>%
  mutate(Card = as.numeric(meta_card_num)) %>%
  select_if(is.numeric) %>%
  select(-township_code)

sum_columns_by_prefix_per_row <- function(df, prefix) {
  df %>%
    select(starts_with(prefix)) %>%
    rowSums(na.rm = TRUE)
}

shap_df_filtered_ %>%
  mutate(
    Characteristics = rowSums(select(., starts_with("char")), na.rm = TRUE),
    Census_Data = rowSums(select(., starts_with("acs5")), na.rm = TRUE),
    Time = rowSums(select(., starts_with("time")), na.rm = TRUE),
    Location = rowSums(select(., starts_with("loc")), na.rm = TRUE) + ccao_is_corner_lot - loc_school_secondary_district_geoid - loc_school_elementary_district_geoid + other_tax_bill_rate,
    Proximity = rowSums(select(., starts_with("prox")), na.rm = TRUE),
    School = rowSums(select(., c("other_school_district_elementary_avg_rating", "other_school_district_secondary_avg_rating", "loc_school_elementary_district_geoid", "loc_school_secondary_district_geoid")), na.rm = TRUE),
    Baseline = pred_card_shap_baseline_fmv,
    Meta = rowSums(select(., starts_with("meta")), na.rm = TRUE)
  ) %>%
  arrange(Pin, Card) %>%
  select(Card, Baseline, Characteristics, Census_Data, Time, Location, Proximity, School, Meta) %>%
  mutate(across(3:ncol(.), scales::dollar)) %>%
  kable(
    col.names = c("Card", "Baseline", "Characteristics", "Census Data", "Time", "Location", "Proximity", "School", "Meta"),
    align = "l"
  ) %>%
  kable_styling(
    "striped",
    position = "left",
    fixed_thead = TRUE,
    html_font = "Consolas"
  )
```


## Change in Pin Value over 3 Year Timeframe
```{r _pin_change_in_house_value, results = 'asis'}
wider_data <- pin_value %>%
  pivot_wider(
    names_from = year,
    values_from = -c(pin, year),
    names_sep = "_",
    id_cols = pin
  )

year_numeric <- as.numeric(params$year)
years <- (year_numeric - 4):year_numeric

# Create a vector of column names to select
cols_to_select <- c("pin", unlist(sapply(years, function(y) {
  c(paste0("mailed_tot_", y), paste0("certified_tot_", y), paste0("board_tot_", y))
})))

single_pin <- wider_data %>%
  select(contains(cols_to_select)) %>%
  mutate(
    across(contains("mailed"), ~ . * 10),
    across(contains("board"), ~ . * 10),
    across(contains("certified"), ~ . * 10)
  ) %>%
  inner_join(
    assessment_pin %>%
      select(meta_pin, pred_pin_final_fmv),
    by = c("pin" = "meta_pin")
  ) %>%
  select_if(~ !all(is.na(.))) %>%
  rename_with(~ str_replace_all(., "_", " ") %>%
    str_replace_all(., " tot", "") %>%
    str_to_title()) %>%
  arrange(Pin) %>%
  select(-Pin)

color_matrix <- matrix("none", nrow = nrow(single_pin), ncol = ncol(single_pin))

for (j in 3:ncol(single_pin)) {
  for (i in 1:nrow(single_pin)) {
    value <- single_pin[i, j]
    previous <- single_pin[i, j - 1]

    if (!is.na(value) && !is.na(previous) && previous != 0) {
      if (value > previous) {
        color_matrix[i, j] <- "green"
      } else if (value < previous) {
        color_matrix[i, j] <- "red"
      } else {
        color_matrix[i, j] <- "transparent"
      }
    } else {
      color_matrix[i, j] <- "gray"
    }
  }
}

single_pin <- single_pin %>%
  mutate_at(1:ncol(single_pin), scales::dollar)

display_df <- as.data.frame(lapply(single_pin, as.character), stringsAsFactors = FALSE)

expanded_color_matrix <- matrix("none", nrow = nrow(display_df), ncol = ncol(display_df))
expanded_color_matrix[, 1:ncol(color_matrix)] <- color_matrix

for (j in 1:ncol(display_df)) {
  for (i in 1:nrow(display_df)) {
    display_df[i, j] <- cell_spec(display_df[i, j], "html", background = expanded_color_matrix[i, j])
  }
}


kable(display_df, format = "html", escape = FALSE) %>%
  kable_styling(
    "striped",
    position = "left",
    fixed_thead = TRUE,
    html_font = "Consolas"
  )
```
