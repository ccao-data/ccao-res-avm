{{< include ../_setup.qmd >}}

# SHAP Values

SHAP values are a way to explain the importance of specific features within the model.
They represent both the direction and magnitude of a feature's impact on an individual
property's predicted value. Summed together, the SHAP values of all features for a given
property should equal the difference between the predicted value and the baseline value.

## Summary Table

```{r _shap_filtering, warning=FALSE}
shap_df_filtered <- shap_df %>%
  left_join(
    assessment_card %>%
      mutate(meta_triad = ccao::town_get_triad(as.character(township_code))) %>%
      select(meta_year, meta_pin, meta_card_num, meta_triad),
    by = c("meta_year", "meta_pin", "meta_card_num")
  ) %>%
  filter(meta_triad == run_triad_code) %>%
  arrange(meta_pin, meta_card_num)
```

```{r _shap_table}
shap_df_filtered %>%
  select(
    where(~ !all(is.na(.x))) & !starts_with("pred") & where(is.numeric)
  ) %>%
  skim() %>%
  rename_with(~ str_replace_all(.x, "skim_|numeric.", "")) %>%
  select(-c(type, n_missing, complete_rate, p25, p75)) %>%
  rename(histogram = hist, median = p50, min = p0, max = p100) %>%
  mutate(across(where(is.numeric), ~ round(.x, 1))) %>%
  left_join(feat_imp_df, by = c("variable" = "model_predictor_all_name")) %>%
  arrange(desc(gain_value)) %>%
  select(
    "Variable" = variable,
    "Mean" = mean,
    "Median" = median,
    "SD" = sd,
    "Min" = min,
    "Max" = max,
    "Histogram" = histogram
  ) %>%
  mutate(across(Mean:Max, scales::dollar)) %>%
  datatable(
    rownames = FALSE,
    options = list(
      columnDefs = list(
        list(
          className = "dt-nowrap dt-right",
          targets = c(1:5)
        )
      )
    )
  )
```

```{r _shap_function}
shap_predictors <- names(shap_df_filtered)
shap_predictors <- shap_predictors[!shap_predictors %in% c(
  "meta_year",
  "meta_pin",
  "meta_card_num",
  "pred_card_shap_baseline_fmv",
  "township_code",
  "meta_triad"
)]

assessment_card_filtered <- assessment_card %>%
  mutate(meta_triad = ccao::town_get_triad(as.character(township_code))) %>%
  filter(meta_triad == run_triad_code) %>%
  arrange(meta_pin, meta_card_num)

create_shapviz <- function(shap_df, assessment_df, idx) {
  shapviz::shapviz(
    object = shap_df_filtered %>%
      select(all_of(shap_predictors)) %>%
      slice(idx) %>%
      as.matrix(),
    X = assessment_df %>%
      select(all_of(shap_predictors)) %>%
      slice(idx),
    baseline = shap_df_filtered$pred_card_shap_baseline_fmv[1]
  )
}
```

## Overall Beeswarm

The [beeswarm plot](https://shap.readthedocs.io/en/latest/example_notebooks/api_examples/plots/beeswarm.html)
displays an information-dense summary of how features impact the model’s output.

Each property is represented by a single dot on each feature facet. The x position of the dot is
determined by the SHAP value of that feature, and dots “pile up” along each feature row to show
density. Color is used to display the original value of the feature. 

```{r _shap_beeswarm_overall, warning=FALSE}
shap_townships_list <- shap_df_filtered %>%
  distinct(township_code) %>%
  pull() %>%
  as.character()

shap_idx_full_model <- which(
  as.character(assessment_card_filtered$township_code) %in% shap_townships_list
)

shapviz::shapviz(
  object = shap_df_filtered %>%
    select(all_of(shap_predictors)) %>%
    slice(shap_idx_full_model) %>%
    as.matrix(),
  X = assessment_card_filtered %>%
    select(all_of(shap_predictors)) %>%
    slice(shap_idx_full_model),
  baseline = shap_df_filtered$pred_card_shap_baseline_fmv[1]
) %>%
  shapviz::sv_importance(
    "beeswarm",
    max_display = 15L
  ) +
  theme_minimal() +
  coord_cartesian(xlim = c(-150000, 300000)) +
  scale_x_continuous(labels = scales::dollar)
```

## Beeswarm Per Township

::: {.panel-tabset}

```{r _shap_beeswarm_iterate_township, results='asis', warning=FALSE}
# Dynamically produce tabset
for (township in shap_townships_list) {
  cat("##", ccao::town_convert(township), "\n")
  shap_idx <- which(
    as.character(assessment_card_filtered$township_code) == township
  )
  print(
    create_shapviz(
      shap_df_filtered,
      assessment_card_filtered,
      shap_idx
    ) %>%
      shapviz::sv_importance(
        "beeswarm",
        max_display = 15L
      ) +
      theme_minimal() +
      coord_cartesian(xlim = c(-150000, 300000)) +
      scale_x_continuous(labels = scales::dollar)
  )
  cat("\n\n")
}
```

:::
