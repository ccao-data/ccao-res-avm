{{< include _setup.qmd >}}

# Model

```{r _model_setup}
training_data_pred <- training_data %>%
  mutate(
    pred_card_initial_fmv = predict(
      model_fit,
      new_data = bake(model_recipe, new_data = ., all_predictors())
    )$.pred
  )
```

## Per Township Accuracy

::: panel-tabset

## MAPE by Quintile

How does accuracy as measured by MAPE (Mean Absolute Percentage Error) change by quintile for each tri-town?

```{r _model_mape_by_quintile}
mape <- training_data_pred %>%
  filter(!sv_is_outlier) %>%
  left_join(
    ccao::town_dict %>%
      select(meta_township_code = township_code, triad_name)
  ) %>%
  filter(triad_name == run_triad, meta_year == max(meta_year)) %>%
  group_by(meta_township_name) %>%
  arrange(meta_sale_price) %>%
  mutate(Quintile = ntile(meta_sale_price, 5)) %>%
  group_by(meta_township_name, Quintile) %>%
  summarise(
    median_sale_price = median(meta_sale_price, na.rm = TRUE),
    median_predicted_fmv = median(pred_card_initial_fmv, na.rm = TRUE),
    MAPE = yardstick::mape_vec(meta_sale_price, pred_card_initial_fmv)
  ) %>%
  rename(Township = meta_township_name)

ggplotly(
  mape %>%
    ggplot(aes(x = Quintile, y = MAPE, color = Township)) +
    geom_line() +
    theme_minimal()
)
```

## Predicted v Actual By Town

```{r _model_predicted_vs_actual_town}
pred_v_actual_town <- test_card %>%
  filter(meta_triad_code == run_triad_code) %>%
  mutate(Township = ccao::town_convert(meta_township_code)) %>%
  rename(
    `Sale Price` = meta_sale_price,
    `Predicted FMV` = pred_card_initial_fmv,
    PIN = meta_pin
  ) %>%
  ggplot() +
  geom_point(aes(
    group = PIN,
    x = `Predicted FMV`,
    y = `Sale Price`,
    color = Township
  )) +
  geom_abline(slope = 1, intercept = 0) +
  scale_x_continuous(
    name = "Predicted FMV",
    labels = scales::label_dollar(
      accuracy = 1,
      scale = 1 / 1000,
      suffix = "K"
    ),
    n.breaks = 5,
    limits = c(1e4, 1.5e6)
  ) +
  scale_y_continuous(
    name = "Actual FMV",
    labels = scales::label_dollar(
      accuracy = 1,
      scale = 1 / 1000,
      suffix = "K"
    ),
    n.breaks = 5,
    limits = c(1e4, 1.5e6)
  ) +
  theme_minimal()

ggplotly(pred_v_actual_town)
```

## Predicted v Actual By Class

```{r _model_predicted_vs_actual_class}
pred_v_actual_class <- test_card %>%
  filter(meta_triad_code == run_triad_code) %>%
  mutate(Township = ccao::town_convert(meta_township_code)) %>%
  rename(
    `Sale Price` = meta_sale_price,
    `Predicted FMV` = pred_card_initial_fmv,
    PIN = meta_pin,
    Class = meta_class
  ) %>%
  ggplot() +
  geom_point(aes(
    group = PIN,
    x = `Predicted FMV`,
    y = `Sale Price`,
    color = Class
  )) +
  geom_abline(slope = 1, intercept = 0) +
  scale_x_continuous(
    name = "Predicted FMV",
    labels = scales::label_dollar(
      accuracy = 1,
      scale = 1 / 1000,
      suffix = "K"
    ),
    n.breaks = 5,
    limits = c(1e4, 1.5e6)
  ) +
  scale_y_continuous(
    name = "Actual FMV",
    labels = scales::label_dollar(
      accuracy = 1,
      scale = 1 / 1000,
      suffix = "K"
    ),
    n.breaks = 5,
    limits = c(1e4, 1.5e6)
  ) +
  theme_minimal()

ggplotly(pred_v_actual_class)
```
:::

## Model Time Tracking

::: panel-tabset

## Training Data (Seen)

Here, the chart demonstrates if the model's median sale price reflects the time trends for the data it has already seen.

```{r _model_time_trends_seen, fig.height=8, fig.width=7, out.width="100%"}
training_data_pred %>%
  filter(
    !sv_is_outlier,
    meta_triad_name == run_triad,
    !ind_pin_is_multicard
  ) %>%
  mutate(
    time_interval = lubridate::interval(
      lubridate::make_date(metadata$input_min_sale_year, 1, 1),
      lubridate::ymd(meta_sale_date)
    ),
    time_sale_month = as.numeric(time_interval %/%
      lubridate::dmonths(1)) + 1
  ) %>%
  group_by(meta_township_name, time_sale_month) %>%
  summarize(
    `Median Prediction` = median(pred_card_initial_fmv),
    `Median Sale Price` = median(meta_sale_price)
  ) %>%
  tidyr::pivot_longer(cols = starts_with("Median")) %>%
  ggplot() +
  geom_line(aes(x = time_sale_month, y = value, color = name)) +
  scale_color_manual(
    name = "",
    values = c(
      "Median Prediction" = "red",
      "Median Sale Price" = "blue"
    )
  ) +
  scale_y_continuous(labels = scales::label_dollar(scale = 1e-3, suffix = "K")) +
  facet_wrap(vars(meta_township_name), scales = "free_y", ncol = 3) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 90, hjust = 1),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
```

## Test Data (Unseen)

This chart looks at sales slightly in the future to see if the model tracks trends which it has not yet seen. 

```{r _model_time_trends_unseen, fig.height=8, fig.width=7, out.width="100%"}
test_card %>%
  filter(meta_triad_code == run_triad_code) %>%
  mutate(
    time_interval = lubridate::interval(
      lubridate::make_date(metadata$input_min_sale_year, 1, 1),
      lubridate::ymd(meta_sale_date)
    ),
    time_sale_month = as.numeric(time_interval %/% lubridate::dmonths(1)) + 1,
    meta_township_name = ccao::town_convert(meta_township_code)
  ) %>%
  group_by(meta_township_name, time_sale_month) %>%
  summarize(
    `Median Prediction` = median(pred_card_initial_fmv),
    `Median Sale Price` = median(meta_sale_price)
  ) %>%
  tidyr::pivot_longer(cols = starts_with("Median")) %>%
  ggplot() +
  geom_line(aes(x = time_sale_month, y = value, color = name)) +
  scale_color_manual(
    name = "",
    values = c("Median Prediction" = "red", "Median Sale Price" = "blue")
  ) +
  scale_y_continuous(labels = scales::label_dollar(scale = 1e-3, suffix = "K")) +
  facet_wrap(vars(meta_township_name),
    scales = "free_y", ncol = 3
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 90, hjust = 1),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
```
:::
