{{< include _setup.qmd >}}

# Outliers

## Sale Outliers

::: panel-tabset

## Sales View

These are the counts of flagged sales by township and flag type, as derived by the Sale Validation script.

```{r _outliers_flagged_sales}
temp_sales <- training_data %>%
  left_join(
    ccao::town_dict %>% select(township_code, township_name, triad_name),
    by = c("meta_township_code" = "township_code")
  ) %>%
  filter(meta_class != "200" & triad_name == run_triad)


temp_sales %>%
  filter(sv_is_outlier == TRUE) %>%
  group_by(meta_class, sv_outlier_type, township_name) %>%
  summarise(
    `Min Sale Price` = min(meta_sale_price, na.rm = TRUE),
    `Median Sale Price` = median(meta_sale_price, na.rm = TRUE),
    `Max Sale Price` = max(meta_sale_price, na.rm = TRUE),
    n = n()
  ) %>%
  left_join(
    temp_sales %>%
      filter(!sv_is_outlier) %>%
      group_by(meta_class, township_name) %>%
      summarise(
        `Median Non-outlier Sale Price` =
          median(meta_sale_price, na.rm = TRUE)
      )
  ) %>%
  mutate(across(contains("Sale"), dollar)) %>%
  dplyr::rename(Class = meta_class, "Township Name" = township_name) %>%
  datatable(
    rownames = FALSE,
    height = "500px",
    options = list(
      columnDefs = list(
        list(className = "dt-center", targets = c(1:7))
      )
    )
  )
```

:::

## Outlier Breakdown

::: panel-tabset

## Outlier Types

```{r _outliers_type_breakdown}
y_lim_axis_outlier_breakdown <- training_data %>%
  filter(!sv_outlier_type %in% c("Not outlier", NA)) %>%
  count(sv_outlier_type) %>%
  summarise(max_value = max(n)) %>%
  pull(max_value)

ggplot(
  training_data %>%
    filter(sv_outlier_type != "Not outlier") %>%
    group_by(sv_outlier_type) %>%
    summarise(count = n()) %>%
    ungroup(),
  aes(x = reorder(sv_outlier_type, -count), y = count)
) +
  labs(
    y = "Number of Sales", x = "Outlier Types",
    title = "Count", subtitle = "by Type"
  ) +
  geom_bar(stat = "identity") +
  geom_text(aes(
    label = count
  ), vjust = -0.5) +
  ylim(0, 1.03 * (y_lim_axis_outlier_breakdown)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.title.y = element_blank(),
    axis.title.x = element_blank()
  )

training_data %>%
  group_by(meta_year, sv_outlier_type) %>%
  summarise(n = n()) %>%
  rename(Year = meta_year) %>%
  pivot_wider(id_cols = Year, names_from = sv_outlier_type, values_from = n) %>%
  kable() %>%
  kable_styling("striped")
```

## Class

```{r _outliers_classes}
ggplot(
  training_data %>%
    group_by(meta_class) %>%
    summarise(percent = mean(case_when
    (sv_is_outlier == TRUE ~ 1, TRUE ~ 0))) %>%
    ungroup(),
  aes(x = meta_class, y = percent)
) +
  labs(title = "Share of Outliers", subtitle = "by Class") +
  geom_bar(stat = "identity") +
  geom_text(aes(
    label = scales::percent(percent, accuracy = .1)
  ), vjust = -0.5) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
  )
```

## Township

```{r _outliers_townships}
y_lim_axis_outlier_townships <- 
  training_data %>%
  group_by(meta_township_name) %>%
  summarise(percent = mean(case_when(sv_is_outlier == TRUE ~ 1, TRUE ~ 0))) %>%
  ungroup() %>%
  slice_max(percent, n = 1) %>%
  pull(percent)

ggplot(
  training_data %>%
    group_by(meta_township_name) %>%
    summarise(percent = mean(case_when
    (sv_is_outlier == TRUE ~ 1, TRUE ~ 0))) %>%
    ungroup(),
  aes(x = reorder(meta_township_name, -percent), y = percent)
) +
  labs(title = "Share of Outliers", subtitle = "by Township") +
  geom_bar(stat = "identity") +
  geom_text(aes(
    label = scales::percent(percent, accuracy = .1)
  ), hjust = -0.1, angle = 90) +
  theme_minimal() +
  scale_y_continuous(
    labels = scales::percent_format(),
    limits = c(0, 1.15 * y_lim_axis_outlier_townships)
  ) +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
  )
```

## Price

```{r _outliers_price}
training_data %>%
  group_by(sv_is_outlier) %>%
  summarise(
    Min = min(meta_sale_price),
    Median = median(meta_sale_price),
    Mean = mean(meta_sale_price),
    Max = max(meta_sale_price),
    `Std dev` = sd(meta_sale_price)
  ) %>%
  rename("Sale category" = sv_is_outlier) %>%
  mutate(across(Min:`Std dev`, dollar)) %>%
  kable() %>%
  kable_styling(
    full_width = TRUE
  )

ggplot(training_data, aes(
  log(meta_sale_price),
  fill = sv_is_outlier
)) +
  geom_density(alpha = 0.5) +
  labs(title = "Cumulative Distribution") +
  theme_minimal() +
  labs(x = "log(price)") +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank()
  )
```

```{r _outliers_median_price_outliers, fig.height=6}
ggplot(
  training_data %>%
    group_by(sv_is_outlier, meta_township_name) %>%
    summarise(median_sale_price = median(meta_sale_price)) %>%
    ungroup() %>%
    pivot_wider(
      id_cols = meta_township_name,
      names_from = sv_is_outlier,
      values_from = median_sale_price
    ) %>%
    mutate(
      percent = `TRUE` / `FALSE`,
      above_below = ifelse(percent > 1,
        "Outlier > Not Outlier", "Not Outlier > Outlier"
      ),
      above_below = factor(above_below,
        levels =
          c("Outlier > Not Outlier", "Not Outlier > Outlier")
      )
    ),
  aes(x = reorder(meta_township_name, percent), y = percent)
) +
  labs(
    title = "Median Outlier Price / Median Not outlier Price",
    subtitle = "by Township",
    fill = "Median Price"
  ) +
  geom_bar(stat = "identity", aes(fill = above_below)) +
  coord_flip() +
  geom_text(aes(
    label = round(percent, 2)
  ), hjust = -0.2) +
  scale_y_continuous(limits = c(0, 5.5)) +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
  )
```

## Price Per SQFT

```{r _outliers_ppsft}
training_data %>%
  filter(!is.na(char_bldg_sf) & char_bldg_sf > 0) %>%
  mutate(ppsf = meta_sale_price / char_bldg_sf) %>%
  group_by(sv_is_outlier) %>%
  summarise(
    Min = min(ppsf),
    Median = median(ppsf),
    Mean = mean(ppsf),
    Max = max(ppsf),
    `Std dev` = sd(ppsf)
  ) %>%
  rename("Sale category" = sv_is_outlier) %>%
  mutate(across(Min:`Std dev`, dollar)) %>%
  kable() %>%
  kable_styling(full_width = TRUE)

ggplot(
  training_data %>%
    filter(!is.na(char_bldg_sf) & char_bldg_sf > 0) %>%
    mutate(ppsf = meta_sale_price / char_bldg_sf),
  aes(log(ppsf),
    fill = sv_is_outlier
  )
) +
  geom_density(alpha = 0.5) +
  labs(title = "Cumulative Distribution") +
  theme_minimal() +
  labs(x = "log(price per sqft)") +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank()
  )
```

## Decile Breakout

```{r _outliers_decile_breakout}
training_data %>%
  arrange(meta_sale_price) %>%
  mutate(decile = ntile(meta_sale_price, 10)) %>%
  filter(decile == 10) %>%
  group_by(sv_is_outlier) %>%
  summarise(
    Min = min(meta_sale_price),
    Median = median(meta_sale_price),
    Mean = mean(meta_sale_price),
    Max = max(meta_sale_price),
    `Std dev` = sd(meta_sale_price)
  ) %>%
  rename("Sale category" = sv_is_outlier) %>%
  mutate(across(Min:`Std dev`, dollar)) %>%
  kable(caption = "Top Decile") %>%
  kable_styling(full_width = TRUE)

y_lim_axis_outlier_by_decile <- 
  training_data %>%
  arrange(meta_sale_price) %>%
  mutate(decile = ntile(meta_sale_price, 10)) %>%
  group_by(decile) %>%
  summarise(percent = mean(
    case_when(sv_is_outlier == TRUE ~ 1, TRUE ~ 0)
  )) %>%
  ungroup() %>% 
  slice_max(percent, n = 1) %>% 
  pull(percent)

ggplot(
  training_data %>%
    arrange(meta_sale_price) %>%
    mutate(decile = ntile(meta_sale_price, 10)) %>%
    group_by(decile) %>%
    summarise(percent = mean(
      case_when(sv_is_outlier == TRUE ~ 1, TRUE ~ 0)
    )) %>%
    ungroup(),
  aes(x = decile, y = percent)
) +
  labs(title = "Share of Outliers", x = "Quantile") +
  geom_bar(stat = "identity") +
  geom_bar(stat = "identity") +
  geom_text(aes(label = scales::percent(percent, accuracy = .1)),
    vjust = -0.1
  ) +
  theme_minimal() +
  scale_y_continuous(
    labels = scales::percent_format(),
    limits = c(0, 1.05 * y_lim_axis_outlier_by_decile)
  ) +
  scale_x_continuous(breaks = seq(1, 10, 1)) +
  theme(axis.title.y = element_blank())


y_lim_axis_outlier_top_decile <-
  training_data %>%
  arrange(meta_sale_price) %>%
  mutate(decile = ntile(meta_sale_price, 10)) %>%
  filter(decile == 10 & sv_outlier_type != "Not outlier") %>%
  group_by(sv_outlier_type) %>%
  summarise(count = n()) %>%
  ungroup() %>% 
  slice_max(count, n = 1) %>% 
  pull(count)


ggplot(
  training_data %>%
    arrange(meta_sale_price) %>%
    mutate(decile = ntile(meta_sale_price, 10)) %>%
    filter(decile == 10 & sv_outlier_type != "Not outlier") %>%
    group_by(sv_outlier_type) %>%
    summarise(count = n()) %>%
    ungroup(),
  aes(x = reorder(sv_outlier_type, -count), y = count)
) +
  labs(
    y = "Number of Sales",
    x = "Outlier Types",
    title = "Outlier Count",
    subtitle = "by Type, Top Decile"
  ) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = count), vjust = -0.5) +
  ylim(0, 1.05 * y_lim_axis_outlier_top_decile) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.title.y = element_blank(),
    axis.title.x = element_blank()
  )
```

:::

## Big Misses

What are the sales with the largest miss relative to town and price quartile?

```{r _outliers_big_misses}
# qnt_df <- assessment_pin %>%
#   mutate(Town = ccao::town_convert(meta_township_code)) %>%
#   filter(
#     Town %in% c("Calumet", "Thornton", "Bloom"),
#     !is.na(sale_recent_1_price),
#     sale_recent_1_date >= lubridate::make_date(as.numeric(params$year) - 1)
#   ) %>%
#   mutate(pred_pin_final_fmv_round) %>%
#   select(
#     PIN = meta_pin, Town, Class = meta_class,
#     NBHD = meta_nbhd_code, `Bldg Sqft` = char_total_bldg_sf, Yrblt = char_yrblt,
#     `Sale 1 Date` = sale_recent_2_date, `Sale 1 Price` = sale_recent_2_price,
#     `Sale 2 Date` = sale_recent_1_date, `Sale 2 Price` = sale_recent_1_price,
#     `Est. FMV` = pred_pin_final_fmv_round
#   ) %>%
#   group_by(Town) %>%
#   mutate(
#     diff = abs(`Sale 2 Price` - `Est. FMV`),
#     `Qnt.` = cut(
#       `Sale 2 Price`,
#       breaks = quantile(`Sale 2 Price`, probs = c(0, 0.25, 0.5, 0.75, 1)),
#       labels = c("Q1", "Q2", "Q3", "Q4"),
#       include.lowest = TRUE
#     )
#   ) %>%
#   group_by(Town, `Qnt.`) %>%
#   slice_max(diff, n = 1) %>%
#   select(-diff) %>%
#   relocate(`Qnt.`, .after = "Town")
# 
# qnt_df %>%
#   datatable(rownames = FALSE)
```
