---
title: "Distributions `r params$run_id`"
execute:
  echo: false
  warning: false
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
    fig-align: center
    fontsize: 12pt
editor: source
params:
  run_id: 2023-03-14-clever-damani
  year: '2023'
---

```{r}
library(knitr)
source("Setup File.R")
```

## Standardized mean differences

The standardized (mean) difference is a measure of distance between two group means in terms of one or more variables.

$$SMD = {\text{Difference in mean outcome between groups} \over \text{Standard deviation of outcome among participants}}$$


We're looking for SMDs greater than .1 or .05 for sensitive covariates.

```{r SMDs}
smd_table <- CreateTableOne(
  vars = vars %>% grep("Median", ., invert = TRUE, value = TRUE),
  strata = "Sale",
  data = sf_parcels,
  test = FALSE,
  includeNA = TRUE
)
print(smd_table, smd = TRUE)
```

## Empirical Cumulative Distributions

For the empirical cumulative distributions, we are looking for overlap/similar distributions. Numeric variables scaled and centered.

::: panel-tabset
## Numeric columns:

```{r ECDFs1}
grobs <-
  lapply(names(sf_parcels %>% select(where(is.numeric))), function(x) {
    data <- sf_parcels %>% select(Sale, any_of(x))
    ggplot(data, aes(scale(sf_parcels %>% pull(x)),
      color = Sale
    )) +
      stat_ecdf(geom = "step") +
      labs(x = str_wrap(x, width = 25)) +
      theme_minimal() +
      theme(
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none"
      )
  })
for (i in seq(1, length(grobs), by = 6)) {
  if (i == 13) {
    grid.arrange(
      grobs = list(
        grobs[[i]],
        grobs[[i + 1]],
        grobs[[i + 2]],
        grobs[[i + 3]],
        rectGrob(gp = gpar(col = "white")),
        rectGrob(gp = gpar(col = "white"))
      ),
      ncol = 3,
      nrow = 2
    )
  } else {
    grid.arrange(
      grobs = list(
        grobs[[i]], grobs[[i + 1]], grobs[[i + 2]],
        grobs[[i + 3]], grobs[[i + 4]], grobs[[i + 5]]
      ),
      ncol = 3,
      nrow = 2
    )
  }
}
```

## Factor columns:

```{r ECDFs2}
grobs <-
  lapply(names(sf_parcels %>% select(where(is.factor) &
    any_of(vars))), function(x) {
    ggplot(sf_parcels, aes(as.numeric(sf_parcels %>% pull(x)),
      color = Sale
    )) +
      stat_ecdf(geom = "step") +
      labs(x = str_wrap(x, width = 25)) +
      theme_minimal() +
      theme(
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none"
      )
  })
for (i in seq(1, length(grobs), by = 6)) {
  if (i == 13) {
    grid.arrange(
      grobs = list(
        grobs[[i]], grobs[[i + 1]], grobs[[i + 2]],
        grobs[[i + 3]], grobs[[i + 4]],
        rectGrob(gp = gpar(col = "white"))
      ),
      ncol = 3,
      nrow = 2
    )
  } else {
    grid.arrange(
      grobs = list(
        grobs[[i]], grobs[[i + 1]], grobs[[i + 2]],
        grobs[[i + 3]], grobs[[i + 4]], grobs[[i + 5]]
      ),
      ncol = 3,
      nrow = 2
    )
  }
}
```

:::
