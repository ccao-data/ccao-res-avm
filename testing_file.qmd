---
title: "testing_file"
execute:
  echo: false
  warning: false
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
    fig-align: center
    fontsize: 12pt
---

```{r, include = FALSE}
renv::install("plotly")
library(arrow)
library(ccao)
library(dplyr)
library(DT)
library(ggplot2)
library(purrr)
library(plotly)
library(tidyr)
```


```{r}
training_data <- read_parquet("/home/damajor/model-res-avm/input/training_data.parquet") %>%
  filter(!ind_pin_is_multicard, !sv_is_outlier) %>%
  mutate(township_name = ccao::town_convert(meta_township_code)) %>%
  arrange(meta_sale_date)

assessment_pin <- read_parquet("/home/damajor/model-res-avm/output/assessment_pin/model_assessment_pin.parquet") %>%
  mutate(township_name = ccao::town_convert(meta_township_code))

assessment_card <- read_parquet("/home/damajor/model-res-avm/output/assessment_card/model_assessment_card.parquet")
```

# Barrington Test
## Sales in Barrington
```{r}
training_data %>%
  filter(meta_township_name == "Barrington") %>%
  ggplot(aes(x = meta_sale_price)) +
  geom_histogram(binwidth = 100000, color = "black", fill = "skyblue") +
  labs(
    title = "Histogram of Sale Prices in Barrington",
    x = "Sale Price",
    y = "Frequency"
  ) +
  theme_minimal()
```

## 10 Largest Barrington Sales

```{r}
training_data %>%
  filter(meta_township_name == "Barrington") %>%
  arrange(desc(meta_sale_price)) %>%
  slice(1:10) %>%
  select(meta_sale_price, meta_sale_document_num, meta_pin) %>%
  datatable(options = list(scrollY = "400px", paging = FALSE))
```



## Barrington Scatterplot

```{r}
# Filter the data
test_3 <- assessment_pin %>%
  filter(township_name == "Barrington")
```


```{r}
# Create the scatterplot
ggplot(test_3, aes(x = sale_recent_1_price, y = pred_pin_final_fmv)) +
  geom_point() +
  labs(
    title = "Scatterplot of Sale Price vs Certified Total",
    x = "Sale Price",
    y = "Certified Total"
  ) +
  theme_minimal()
```

# Distribution of Characteristics

```{r}
# Select numeric columns
numeric <- training_data %>%
  select(where(is.numeric))

# Create histograms for all numeric variables
plots <- imap(numeric, ~ ggplot(training_data, aes(x = .data[[.y]])) +
  geom_histogram(bins = 30) +
  labs(
    title = paste("Histogram of", .y),
    x = .y,
    y = "Frequency"
  ) +
  theme_minimal())
```

::: {.panel-tabset}

```{r _comp_neighborhood_level_means, results='asis'}
iwalk(plots, ~ {
  cat("##", .y, "\n\n")
  print(.x)
  cat("\n\n")
})
```
:::

# Outliers in Training Data

##  10 Largest char_bldg_sf Properties Per Township

```{r}
assessment_pin %>%
  filter(meta_triad_code == "2") %>%
  group_by(meta_township_code) %>%
  arrange(desc(char_bldg_sf)) %>%
  distinct(meta_pin, .keep_all = TRUE) %>%
  slice(1:10) %>%
  ungroup() %>%
  mutate(pred_pin_final_fmv = floor(pred_pin_final_fmv)) %>%
  select(meta_pin, class, pred_pin_final_fmv, township_name, char_total_bldg_sf, char_yrblt) %>%
  datatable(options = list(scrollY = "400px", paging = FALSE))
```

## Largest pred_pin_final_fmv Properties Per Township

```{r}
assessment_pin %>%
  filter(meta_triad_code == "2") %>%
  group_by(meta_township_code) %>%
  arrange(desc(pred_pin_final_fmv)) %>%
  distinct(meta_pin, .keep_all = TRUE) %>%
  slice(1:10) %>%
  ungroup() %>%
  mutate(pred_pin_final_fmv = floor(pred_pin_final_fmv)) %>%
  select(meta_pin, class, pred_pin_final_fmv, township_name, char_total_bldg_sf, char_yrblt) %>%
  datatable(options = list(scrollY = "400px", paging = FALSE))
```

# Pin Tests

```{r}
assessment_card %>%
  filter(meta_pin %in% c(
    "17102060351010", "16143120330000", "11312110190000", "24072010490000",
    "17062000841001", "17062000841002", "11181100020000", "12133010680000",
    "14322140240000", "05211000140000", "20142150160000"
  )) %>%
  datatable(options = list(scrollY = "400px", paging = FALSE))
```


# Largest and Smallest Differences Between FMV and any Sale Price (Assessment Pin)
```{r}
model_big_misses_assessment <- assessment_pin %>%
  filter(
    meta_triad_code == "2",
    !is.na(sale_recent_1_price), !is.na(pred_pin_final_fmv_round)
  ) %>%
  select(
    Town = township_name, PIN = meta_pin, Class = meta_class,
    NBHD = meta_nbhd_code, `Bldg Sqft` = char_total_bldg_sf, Yrblt = char_yrblt,
    `Sale 2 Date` = sale_recent_2_date, `Sale 2 Price` = sale_recent_2_price,
    `Sale 1 Date` = sale_recent_1_date, `Sale 1 Price` = sale_recent_1_price,
    `Est. FMV` = pred_pin_final_fmv_round
  ) %>%
  mutate(
    Difference = (`Est. FMV` - `Sale 1 Price`),
    .by = Town
  ) %>%
  group_by(Town) %>%
  summarise(
    max_min_rows = list(bind_rows(
      slice_max(cur_data(), Difference, n = 4),
      slice_min(cur_data(), Difference, n = 4)
    ))
  ) %>%
  unnest(max_min_rows) %>%
  arrange(Town, -Difference) %>%
  mutate(
    across(
      c(ends_with("Price"), ends_with("FMV"), Difference),
      ~ scales::dollar(.x, prefix = "$")
    ),
    `Bldg Sqft` = scales::comma(`Bldg Sqft`)
  ) %>%
  arrange(Town)

model_big_misses_assessment %>%
  datatable(
    rownames = FALSE,
    options = list(
      columnDefs = list(
        list(
          className = "dt-right",
          targets = c(
            "Bldg Sqft", "Sale 1 Price", "Sale 1 Date",
            "Sale 2 Price", "Sale 2 Date",
            "Est. FMV", "Difference"
          )
        ),
        list(
          className = "dt-nowrap",
          targets = c("Sale 1 Date", "Sale 2 Date")
        )
      )
    )
  )
```

```{r}
# Create a list of plots, one per township
plots <- assessment_pin %>%
  filter(meta_triad_code == "2") %>%
  group_by(township_name) %>%
  group_split() %>%
  set_names(map_chr(., ~ unique(.x$township_name))) %>% # Assign names to the list based on township
  map(~ ggplot(.x, aes(x = pred_pin_initial_fmv)) +
    geom_histogram(binwidth = 50000, fill = "skyblue", color = "black") +
    labs(
      title = paste("Distribution of Initial FMV for", unique(.x$township_name)),
      x = "Initial FMV",
      y = "Frequency"
    ) +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5)))
```

::: {.panel-tabset}

```{r _fmv_plots, results='asis'}
iwalk(plots, ~ {
  cat("##", .y, "\n\n")
  print(.x)
  cat("\n\n")
})
```
:::
# Scatterplot of FMV vs Sale Price


```{r}
test <- assessment_pin %>%
  filter(flag_pin_is_multicard == "FALSE") %>%
  left_join(training_data %>% select(meta_pin, char_bldg_sf), by = "meta_pin")

subset_top_sales <- test %>%
  mutate(price_per_sq_ft = sale_recent_1_price / char_bldg_sf) %>%
  group_by(township_name) %>%
  slice_max(sale_recent_1_price, n = 20) %>%
  mutate(type = "top_sales")

subset_highest_ratios <- test %>%
  filter(!is.na(char_bldg_sf)) %>%
  mutate(price_per_sq_ft = sale_recent_1_price / char_bldg_sf) %>%
  group_by(township_name) %>%
  slice_max(price_per_sq_ft, n = 20) %>%
  mutate(type = "highest_ratios")

subset_lowest_ratios <- test %>%
  filter(!is.na(char_bldg_sf)) %>%
  mutate(price_per_sq_ft = sale_recent_1_price / char_bldg_sf) %>%
  group_by(township_name) %>%
  slice_min(price_per_sq_ft, n = 20) %>%
  mutate(type = "lowest_ratios")

# Combine the subsets into one data frame
subset <- bind_rows(subset_top_sales, subset_highest_ratios, subset_lowest_ratios) %>%
  select(township_name, meta_pin, sale_recent_1_price, char_bldg_sf,
         price_per_sq_ft, type, pred_pin_final_fmv_round)

scatterplot <- subset %>%
  ggplot(aes(x = sale_recent_1_price, y = pred_pin_final_fmv_round,
             color = type, text = paste(
    "Township: ", township_name,
    "<br>Meta PIN: ", meta_pin,
    "<br>Sale Price: $", scales::comma(sale_recent_1_price),
    "<br>Predicted Final FMV: $", scales::comma(pred_pin_final_fmv_round),
    "<br>Difference: $", scales::comma(pred_pin_final_fmv_round - sale_recent_1_price),
    "<br>Building SF: ", scales::comma(char_bldg_sf),
    "<br>Price/Sq Ft: $", scales::comma(price_per_sq_ft)
  ))) +
  geom_point(size = 1, alpha = 0.7) +
  labs(
    title = "Interactive Scatterplot of Price per Sq Ft vs Building SF",
    x = "Sale Price",
    y = "Predicted Final FMV (Rounded)",
    color = "Type"
  ) +
  theme_minimal() +
  xlim(0, 10000000) + # Set max x limit
  ylim(0, 10000000) # Set max y limit

# Convert to interactive plotly object with adjusted axis limits
interactive_scatterplot <- ggplotly(scatterplot, tooltip = "text")

# Display the interactive plot
interactive_scatterplot
```

