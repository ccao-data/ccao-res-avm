---
title: "testing_file"
format: html
---

```{r}
library(arrow)
library(dplyr)
library(purrr)
library(ggplot2)

training_data <- read_parquet("/home/damajor/model-res-avm/input/training_data.parquet") %>%
  filter(!ind_pin_is_multicard, !sv_is_outlier) %>%
  arrange(meta_sale_date)

training_data %>%
  filter(meta_township_name == "Barrington") %>%
  arrange(desc(meta_sale_price)) %>%
  slice(1:10) %>%
  select(meta_sale_price, meta_sale_document_num, meta_pin)
```


```{r}
training_data %>%
  filter(meta_township_name == "Barrington") %>%
  ggplot(aes(x = meta_sale_price)) +
  geom_histogram(binwidth = 100000, color = "black", fill = "skyblue") +
  labs(
    title = "Histogram of Sale Prices in Barrington",
    x = "Sale Price",
    y = "Frequency"
  ) +
  theme_minimal()

```


```{r}
numeric <- training_data %>%
  select(where(is.numeric))
```

```{r}

# Select numeric columns
numeric <- training_data %>%
  select(where(is.numeric))

# Create histograms for all numeric variables
plots <- map(numeric, ~ ggplot(training_data, aes(x = .x)) +
  geom_histogram(bins = 30) +
  labs(title = paste("Histogram of", deparse(substitute(.x))),
       x = deparse(substitute(.x)),
       y = "Frequency") +
  theme_minimal())


```

::: {.panel-tabset}

```{r _comp_neighborhood_level_means, results='asis'}
iwalk(plots, ~ {
  cat("##", .y, "\n\n")
  print(.x)
  cat("\n\n")
})
```

```{r}
test <- training_data %>%
  arrange(desc(char_bldg_sf)) %>%
  slice(1:100) %>%
  select(meta_pin, char_bldg_sf)

test_2 <- training_data %>%
  arrange(desc(meta_certified_tot)) %>%
  distinct(meta_pin, .keep_all = TRUE) %>%
  slice(1:100) %>%
  select(meta_pin, meta_certified_tot, meta_township_name, meta_year, char_bldg_sf, char_land_sf)
```


```{r}
test_3 <- training_data %>%
  filter(meta_township_name == "Barrington") %>%
  scatterplot(meta_sale_price, meta_certified_tot)
```
```{r}
test_4 <- training_data %>%
  filter(meta_pin %in% c("11181100020000", "12133010680000", "14322140240000", "05211000140000", "20142150160000")) %>%
  arrange(meta_pin, meta_year)


```

```{r}
library(ggplot2)
library(dplyr)

# Filter the data
test_3 <- training_data %>%
  filter(meta_township_name == "Barrington")

# Create the scatterplot
ggplot(test_3, aes(x = meta_sale_price, y = meta_certified_tot)) +
  geom_point() +
  labs(
    title = "Scatterplot of Sale Price vs Certified Total",
    x = "Sale Price",
    y = "Certified Total"
  ) +
  theme_minimal()

```
```{r}
model_big_misses_assessment <- assessment_pin %>%
  mutate(township_name = ccao::town_convert(meta_township_code)) %>%
  filter(
    meta_triad_code == run_triad_code,
    !is.na(sale_recent_1_price),
    !is.na(pred_pin_final_fmv_round)) %>%
  select(
    Town = township_name, PIN = meta_pin, Class = meta_class,
    NBHD = meta_nbhd_code, `Bldg Sqft` = char_total_bldg_sf, Yrblt = char_yrblt,
    `Sale 2 Date` = sale_recent_2_date, `Sale 2 Price` = sale_recent_2_price,
    `Sale 1 Date` = sale_recent_1_date, `Sale 1 Price` = sale_recent_1_price,
    `Est. FMV` = pred_pin_final_fmv_round) %>%
 mutate(
    Difference = (`Est. FMV` - `Sale 1 Price`),
    .by = Town
  ) %>%
  group_by(Town) %>%
  summarise(
    max_min_rows = list(bind_rows(
      slice_max(cur_data(), Difference, n = 4),
      slice_min(cur_data(), Difference, n = 4)
    ))
  ) %>%
  unnest(max_min_rows) %>% 
  arrange(Town, -Difference) %>%
  mutate(
    across(
      c(ends_with("Price"), ends_with("FMV"), Difference),
      ~ scales::dollar(.x, prefix = "$")
    ),
    `Bldg Sqft` = scales::comma(`Bldg Sqft`)
  ) %>%
  arrange(Town)

model_big_misses_assessment %>%
  datatable(
    rownames = FALSE,
    options = list(
      columnDefs = list(
        list(
          className = "dt-right",
          targets = c(
            "Bldg Sqft", "Sale 1 Price", "Sale 1 Date",
            "Sale 2 Price", "Sale 2 Date",
            "Est. FMV", "Difference"
          )
        ),
        list(
          className = "dt-nowrap",
          targets = c("Sale 1 Date", "Sale 2 Date")
        )
      )
    )
  )

View(table)
```

