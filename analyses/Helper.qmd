fetch_analyses <- function(run_id, year, paths) {
  tictoc::tic(paste0("Fetched run: ", run_id))

  s3_objs <- grep("s3://", unlist(analyses_paths$output), value = TRUE)
  bucket <- strsplit(s3_objs[1], "/")[[1]][3]

  data_list <- list()

  for (analyses_path in analyses_paths$output) {
    is_directory <- endsWith(analyses_path$s3, "/")
    if (is_directory) {
      partitioned_by_run <- endsWith(analyses_path$s3, paste0("run_id=", run_id, "/"))
      if (partitioned_by_run) {
        dir_path <- analyses_path$s3
      } else {
        dir_path <- paste0(analyses_path$s3, "year=", year, "/run_id=", run_id, "/")
      }

      message("Now fetching: ", dir_path)
      objs_prefix <- sub(paste0("s3://", bucket, "/"), "", dir_path)
      objs <- aws.s3::get_bucket_df(bucket, objs_prefix)
      objs <- dplyr::filter(objs, Size > 0)

      if (nrow(objs) > 0) {
        combined_data <- NULL
        for (key in objs$Key) {
          message("Now fetching: ", key)
          local_temp_path <- file.path(tempdir(), basename(key))
          aws.s3::save_object(key, bucket = bucket, file = local_temp_path)

          # Read the Parquet file and append it to combined_data
          temp_data <- arrow::read_parquet(local_temp_path)
          if (is.null(combined_data)) {
            combined_data <- temp_data
          } else {
            combined_data <- dplyr::bind_rows(combined_data, temp_data)
          }
        }
        data_list[[analyses_path$key]] <- combined_data
      } else {
        warning(analyses_path$key, " does not exist for this run")
      }
    } else {
      message("Now fetching: ", analyses_path$s3)
      if (aws.s3::object_exists(analyses_path$s3, bucket = bucket)) {
        local_temp_path <- file.path(tempdir(), basename(analyses_path$s3))
        aws.s3::save_object(analyses_path$s3, bucket = bucket, file = local_temp_path)
        data_list[[analyses_path$key]] <- arrow::read_parquet(local_temp_path)
      } else {
        warning(analyses_path$key, " does not exist for this run")
      }
    }
  }

  tictoc::toc()
  return(data_list)
}

data <- fetch_analyses(params$run_id, params$run_id_year, analyses_paths)
